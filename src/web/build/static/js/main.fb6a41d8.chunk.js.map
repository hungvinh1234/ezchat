{"version":3,"sources":["api/ChatHttpServer.js","pages/authentication/login/Login.js","pages/authentication/registration/Registration.js","pages/authentication/Authentication.js","socketio/ChatSocketServer.js","pages/home/chat-list/ChatList.js","pages/home/conversation/Conversation.js","pages/home/Home.js","App.js","serviceWorker.js","index.js","config/index.js","images/loading3.gif","images/logo.png","images/logout.png"],"names":["api_ChatHttpServer","Promise","resolve","reject","sessionStorage","getItem","error","removeItem","key","value","setItem","userCredential","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","axios","config","url","then","result","data","catch","err","console","log","response","stop","_x","_x2","apply","this","arguments","username","_ref2","_callee2","_context2","sent","t0","_x3","_x4","_ref3","_callee3","_context3","_x5","_x6","userId","_ref4","_callee4","_context4","_x7","_x8","toUserId","_ref5","_callee5","_context5","_x9","_x10","Login","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleLogin","event","preventDefault","loadingState","ChatHttpServer","login","state","alert","message","setLS","history","push","handleInputChange","setState","defineProperty","target","name","password","react_default","createElement","Form","className","Group","controlId","Control","type","placeholder","onChange","Button","onClick","Component","withRouter","Registration","handleRegistration","register","usernameAvailable","_this2","lib","minLength","debounceTimeout","e","Alert","username-availability-warning","visibility-hidden","variant","Authentication","setRenderLoadingState","concat","src","loadinggif","ezlogo","Tabs","defaultActiveKey","Tab","eventKey","title","authentication_login_Login","authentication_registration_Registration","events","require","socketio_ChatSocketServer","socket","eventEmitter","EventEmitter","io","query","emit","on","x","_this3","ChatList","createChatListUsers","chatListResponse","chatListUsers","singleUser","length","filter","obj","id","chatList","toConsumableArray","userDisconnected","loggedOutUser","findIndex","userid","online","loading","selectedUser","user","selectedUserId","updateSelectedUser","ChatSocketServer","getChatList","removeListener","Fragment","map","index","Conversation","receiveSocketMessages","socketResponse","fromUserId","conversations","scrollMessageContainer","getMessages","_this$props","newSelectedUser","messageResponse","messages","messageLoading","sendMessage","onclick","_this$props2","undefined","router","navigate","sendAndUpdateMessages","trim","isSeen","message_list_name","onFocusMessage","arr","lastMessage","sendSeen","messageContainer","React","createRef","setSeen","bind","assertThisInitialized","receiveMessage","receiveSeen","prevProps","current","setTimeout","scrollTop","scrollHeight","warn","indexLastRecord","ref","conversation","alignMessages","showIsSeen","_this$state","style","color","getMessageUI","getInitiateConversationUI","onKeyPress","onFocus","Home","isOverlayVisible","logout","removeLS","loggedOut","getChatBoxComponent","home_conversation_Conversation","getUserId","userSessionCheck","establishSocketConnection","home_chat_list_ChatList","alt","logo","paddingLeft","paddingTop","logouticon","role","getChatListComponent","App","react_router_dom","basename","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.fb6a41d8.chunk.js","sourcesContent":["import * as axios from 'axios';\r\nimport config from '../config'\r\n \r\nclass ChatHttpServer {\r\n\r\n    getUserId() {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                resolve(sessionStorage.getItem('userid'));\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    removeLS() {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                sessionStorage.removeItem('userid');\r\n                sessionStorage.removeItem('username');\r\n                resolve(true);\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    setLS(key, value) {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                sessionStorage.setItem(key, value);\r\n                resolve(true);\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    login(userCredential) {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                axios.post(config.url+'/login', userCredential).then(result => {\r\n                    resolve(result.data);\r\n                }).catch( err => {\r\n                    console.log(err.response.data)\r\n                    resolve(err.response.data)\r\n                }\r\n                )\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    checkUsernameAvailability(username) {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const response = await axios.post(config.url+'/usernameAvailable', {\r\n                    username: username\r\n                });\r\n                resolve(response.data);\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n    \r\n    register(userCredential) {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                axios.post(config.url+'/register', userCredential).then(result => {\r\n                    resolve(result.data);\r\n                }).catch( err => \r\n                    resolve(err.response.data)\r\n                )\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    userSessionCheck(userId) {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const response = await axios.post(config.url+'/userSessionCheck', {\r\n                    userId: userId\r\n                });\r\n                resolve(response.data);\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    getMessages(userId, toUserId) {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const response = await axios.post(config.url+'/getMessages', {\r\n                    userId: userId,\r\n                    toUserId: toUserId\r\n                });\r\n                resolve(response.data);\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport default new ChatHttpServer();","import React, { Component } from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { withRouter } from 'react-router-dom';\r\nimport ChatHttpServer from '../../../api/ChatHttpServer';\r\nimport './Login.css';\r\n\r\n\r\nclass Login extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: '',\r\n      password: ''\r\n    };\r\n  }\r\n\r\n  handleLogin = async (event) => {\r\n    event.preventDefault();\r\n    this.props.loadingState(true);\r\n    try {\r\n      const response = await ChatHttpServer.login(this.state);\r\n      this.props.loadingState(false);\r\n      if(response.error) {\r\n        alert(response.message)\r\n      } else {\r\n        ChatHttpServer.setLS('userid', response.userId);\r\n        this.props.history.push(`/home`)\r\n      }\r\n    } catch (error) {\r\n      this.props.loadingState(false);\r\n      alert('Invalid login details')\r\n    }\r\n  }\r\n\r\n  handleInputChange = (event) => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n  \r\n      <Form className=\"auth-form\">\r\n        <Form.Group controlId=\"loginUsername\">\r\n          <Form.Control \r\n            type = \"text\"\r\n            name = \"username\"\r\n            placeholder = \"Enter username\"\r\n            onChange = {\r\n              this.handleInputChange\r\n            }\r\n          />\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"loginPassword\">\r\n          <Form.Control \r\n          type = \"password\"\r\n          name = \"password\"\r\n          placeholder = \"Password\"\r\n          onChange = {\r\n            this.handleInputChange\r\n          }\r\n          />\r\n        </Form.Group>\r\n        <Button className=\"btnLogin\" type=\"submit\" onClick={this.handleLogin}>\r\n          Login\r\n        </Button>\r\n      </Form>\r\n   \r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Login)\r\n","import React, { Component } from 'react';\r\nimport { Alert, Form, Button } from 'react-bootstrap';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { DebounceInput } from 'react-debounce-input';\r\n\r\nimport ChatHttpServer from '../../../api/ChatHttpServer';\r\nimport './Registration.css';\r\n\r\nclass Registration extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: '',\r\n      password: '',\r\n      usernameAvailable: true\r\n    };\r\n  }\r\n\r\n  handleRegistration = async (event) => {\r\n    event.preventDefault();\r\n    this.props.loadingState(true);\r\n    try {\r\n      var data = {\r\n        username: this.state.username, \r\n        password: this.state.password\r\n      }\r\n      const response = await ChatHttpServer.register(data);\r\n      this.props.loadingState(false);\r\n      if (response.error) {\r\n        alert(response.message)\r\n      } else {\r\n        ChatHttpServer.setLS('userid', response.userId);\r\n        this.props.history.push(`/home`);\r\n        alert('Registration Successful !')\r\n      }\r\n    } catch (error) {\r\n      this.props.loadingState(false);\r\n      alert('Unable to register, try after some time' + error)\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <Form className=\"auth-form\">\r\n        <Form.Group controlId=\"formUsername\">\r\n          <DebounceInput\r\n            className=\"form-control\"\r\n            placeholder = \"Enter username\"\r\n            minLength={2}\r\n            debounceTimeout={300}\r\n            onChange= {(e) => this.setState({username: e.target.value})}\r\n            />\r\n          <Alert className={{\r\n            'username-availability-warning' : true,\r\n            'visibility-hidden': this.state.usernameAvailable\r\n          }}  variant=\"danger\">\r\n            <strong>{this.state.username}</strong> is already taken, try another username.\r\n          </Alert>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formPassword\">\r\n          <Form.Control \r\n            type = \"password\"\r\n            name = \"password\"\r\n            placeholder = \"Password\"\r\n            onChange= {(e) => this.setState({password: e.target.value})}\r\n          />\r\n        </Form.Group>\r\n        <Button className=\"btnRegis\" type=\"submit\" onClick={this.handleRegistration}>\r\n          Registration\r\n        </Button>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Registration)\r\n","import React, { Component } from 'react';\r\nimport {Tabs, Tab} from 'react-bootstrap'\r\n\r\nimport Login from './login/Login';\r\nimport Registration from './registration/Registration';\r\n\r\nimport './Authentication.css';\r\nimport loadinggif from '../../images/loading3.gif';\r\nimport ezlogo from '../../images/logo.png'\r\n\r\n\r\nclass Authentication extends Component {\r\n  state = {\r\n    loadingState: false\r\n  }\r\n\r\n  setRenderLoadingState = (loadingState) => {\r\n    this.setState({\r\n      loadingState: loadingState\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\" >\r\n        <div className = {`overlay auth-loading ${this.state.loadingState ? '' : 'visibility-hidden'}`}>\r\n          <img src={loadinggif}/>\r\n        </div>\r\n        <div className=\"ezlogo\">\r\n        <img src={ezlogo}/>\r\n        </div>\r\n        <div className=\"authentication-screen\">\r\n          <Tabs variant=\"pills\" defaultActiveKey = \"login\" >\r\n            <Tab eventKey=\"login\" title=\"Login\">\r\n              <Login loadingState={this.setRenderLoadingState}/>\r\n            </Tab>\r\n            <Tab eventKey=\"registration\" title=\"Registration\">\r\n              <Registration loadingState={this.setRenderLoadingState}/>\r\n            </Tab>\r\n          </Tabs>\r\n        </div>\r\n     \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Authentication;\r\n","import * as io from 'socket.io-client';\r\nimport config from '../config'\r\n\r\nconst events = require('events');\r\n\r\nclass ChatSocketServer {\r\n    \r\n    socket = null\r\n    eventEmitter = new events.EventEmitter();\r\n\r\n    // Connecting to Socket Server\r\n    establishSocketConnection(userId) {\r\n        try {\r\n            this.socket = io(config.url, {\r\n                query: `userId=${userId}`\r\n            });\r\n        } catch (error) {\r\n            alert(`Something went wrong; Can't connect to socket server`);\r\n        }\r\n    }\r\n\r\n    getChatList(userId) {\r\n        this.socket.emit('chat-list', {\r\n            userId: userId\r\n        });\r\n        this.socket.on('chat-list-response', (data) => {\r\n            this.eventEmitter.emit('chat-list-response', data);\r\n        });\r\n    }\r\n\r\n    sendMessage(message) {\r\n        this.socket.emit('add-message', message);\r\n        \r\n    }\r\n\r\n    receiveSeen(x){\r\n        this.socket.on('is seen', (data) => {\r\n            x();\r\n        });\r\n\r\n    }\r\n\r\n    sendSeen(data){\r\n        this.socket.emit('is seen', data);\r\n    }\r\n\r\n    receiveMessage() {\r\n        this.socket.on('add-message-response', (data) => {\r\n            this.eventEmitter.emit('add-message-response', data);\r\n        });\r\n    }\r\n\r\n    logout(userId) {\r\n        this.socket.emit('logout', userId);\r\n        this.socket.on('logout-response', (data) => {\r\n            this.eventEmitter.emit('logout-response', data);\r\n        });\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default new ChatSocketServer()","import React, { Component } from 'react';\r\n\r\nimport ChatSocketServer from '../../../socketio/ChatSocketServer';\r\nimport \"./ChatList.css\";\r\n\r\nclass ChatList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      selectedUserId: null,\r\n      chatListUsers: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const userId = this.props.userId;\r\n    ChatSocketServer.getChatList(userId);\r\n    ChatSocketServer.eventEmitter.on('chat-list-response', this.createChatListUsers);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    ChatSocketServer.eventEmitter.removeListener('chat-list-response', this.createChatListUsers);\r\n  }\r\n\r\n  createChatListUsers = (chatListResponse) => {    \r\n    if (!chatListResponse.error) {\r\n      let chatListUsers = this.state.chatListUsers;\r\n      if (chatListResponse.singleUser) {\r\n        if (chatListUsers.length > 0) {\r\n          chatListUsers = chatListUsers.filter(function (obj) {\r\n            return obj.id !== chatListResponse.chatList[0].id;\r\n          });\r\n        }\r\n        /* Adding new online user into chat list array */\r\n        chatListUsers = [...chatListUsers, ...chatListResponse.chatList];\r\n      } else if (chatListResponse.userDisconnected) {\r\n        const loggedOutUser = chatListUsers.findIndex((obj) => obj.id === chatListResponse.userid);\r\n        if (loggedOutUser >= 0) {\r\n          chatListUsers[loggedOutUser].online = 'N';\r\n        }\r\n      } else {\r\n        /* Updating chat list if user logs in. */\r\n        chatListUsers = chatListResponse.chatList;\r\n      }\r\n      this.setState({\r\n        chatListUsers: chatListUsers\r\n      });\r\n    } else {\r\n      alert(`Unable to load Chat list, Redirecting to Login.`);\r\n    }\r\n    this.setState({\r\n      loading: false\r\n    });\r\n  }\r\n\r\n  selectedUser = (user) => {\r\n    this.setState({\r\n      selectedUserId: user.id\r\n    });\r\n    this.props.updateSelectedUser(user)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <ul className={`user-list ${this.state.chatListUsers.length === 0 ? 'visibility-hidden' : ''}`} >\r\n          {\r\n            this.state.chatListUsers.map( (user, index) => \r\n              <li \r\n                key={index} \r\n                className={this.state.selectedUserId === user.id ? 'active' : ''}\r\n                onClick={() => this.selectedUser(user)}\r\n              >\r\n                {user.username}\r\n                <span className={user.online === 'Y' ? 'online' : ''}></span>\r\n              </li>\r\n            )\r\n          }\r\n        </ul>\r\n        <div className={`alert \r\n          ${this.state.loading ? 'alert-info' : ''} \r\n          ${this.state.chatListUsers.length > 0 ? 'visibility-hidden' : ''}`\r\n        }>\r\n          { this.state.loading|| this.state.chatListUsers.length.length === 0 ? 'Loading your chat list.' : 'No User Available to chat.'}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChatList;\r\n","import React, { Component } from 'react';\r\n\r\nimport ChatHttpServer from '../../../api/ChatHttpServer';\r\nimport ChatSocketServer from '../../../socketio/ChatSocketServer';\r\n\r\nimport './Conversation.css';\r\nimport { Button } from 'react-bootstrap';\r\nimport * as io from 'socket.io-client';\r\nimport config from '../../../config'\r\n\r\n\r\n\r\nclass Conversation extends Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      messageLoading: true,\r\n      conversations: [],\r\n      selectedUser: null\r\n    }\r\n    this.messageContainer = React.createRef();\r\n    this.setSeen = this.setSeen.bind(this);\r\n    this.socket = null;\r\n  }\r\n\r\n  setSeen() {\r\n    if(this.state.conversations[0] !== undefined){\r\n      \r\n      var conversations=this.state.conversations;\r\n      conversations[ conversations.length -1].isSeen=true;\r\n\r\n      this.setState({\r\n        conversations: conversations,\r\n    \r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    ChatSocketServer.receiveMessage();\r\n    ChatSocketServer.receiveSeen(this.setSeen);\r\n\r\n   ChatSocketServer.eventEmitter.on('add-message-response', this.receiveSocketMessages);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    ChatSocketServer.eventEmitter.removeListener('add-message-response', this.receiveSocketMessages);\r\n    \r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.newSelectedUser === null || (this.props.newSelectedUser.id !== prevProps.newSelectedUser.id)) {\r\n      this.getMessages();\r\n    }\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (state.selectedUser === null || state.selectedUser.id !== props.newSelectedUser.id) {\r\n      return {\r\n        selectedUser: props.newSelectedUser\r\n      };\r\n    }\r\n    return null;    \r\n  }\r\n\r\n  receiveSocketMessages = (socketResponse) => {\r\n    const { selectedUser } = this.state;\r\n      if (selectedUser !== null && selectedUser.id === socketResponse.fromUserId) {\r\n        this.setState({\r\n          conversations: [...this.state.conversations, socketResponse]\r\n        });\r\n        this.scrollMessageContainer();\r\n      }\r\n  }\r\n\r\n  getMessages = async () => {\r\n    try {\r\n      const { userId, newSelectedUser} = this.props;\r\n      const messageResponse = await ChatHttpServer.getMessages(userId,newSelectedUser.id);\r\n      if (!messageResponse.error) {\r\n        this.setState({\r\n          conversations: messageResponse.messages,\r\n        });\r\n        this.scrollMessageContainer();\r\n      } else {\r\n        alert('Unable to fetch messages');\r\n      }\r\n      this.setState({\r\n        messageLoading: false\r\n      });\r\n    } catch (error) {\r\n      this.setState({\r\n        messageLoading: false\r\n      });\r\n    }\r\n  }\r\n\r\n  sendMessage = (event) => {\r\n    if (event.key === 'Enter'||onclick) {\r\n      const message = event.target.value;\r\n      const { userId, newSelectedUser } = this.props;\r\n      if (message === '' || message === undefined || message === null) {\r\n        alert(`Message can't be empty.`);\r\n      } else if (userId === '') {\r\n        this.router.navigate(['/']);\r\n      } else if (newSelectedUser === undefined) {\r\n        alert(`Select a user to chat.`);\r\n      } else {\r\n        this.sendAndUpdateMessages({\r\n          fromUserId: userId,\r\n          message: (message).trim(),\r\n          toUserId: newSelectedUser.id,\r\n          isSeen: false,\r\n          message_list_name: userId + newSelectedUser.id,\r\n        });\r\n        event.target.value = '';\r\n      }\r\n    }\r\n  }\r\n\r\n  sendAndUpdateMessages(message) {\r\n    try {\r\n      ChatSocketServer.sendMessage(message);\r\n      this.setState({\r\n        conversations : [...this.state.conversations, message]\r\n      });\r\n      this.scrollMessageContainer();\r\n    } catch (error) {\r\n      alert(`Can't send your message`);\r\n    }\r\n  }\r\n\r\n  scrollMessageContainer() {\r\n    if (this.messageContainer.current !== null) {\r\n      try {\r\n        setTimeout(() => {\r\n          this.messageContainer.current.scrollTop = this.messageContainer.current.scrollHeight;\r\n        }, 100);\r\n      } catch (error) {\r\n        console.warn(error);\r\n      }\r\n    }\r\n  }\r\n\r\n  alignMessages(toUserId) {\r\n    const { userId } = this.props;\r\n    return userId !== toUserId;\r\n  }\r\n\r\n  showIsSeen(){\r\n    var indexLastRecord = this.state.conversations[this.state.conversations.length -1];\r\n    this.scrollMessageContainer();\r\n    if(indexLastRecord.isSeen === true && indexLastRecord.fromUserId === sessionStorage.getItem('userid'))\r\n    {\r\n      console.log(\"true\")\r\n      return true\r\n    }\r\n    console.log(\"fasle\")\r\n    return false\r\n  }\r\n  \r\n  getMessageUI () {\r\n    return (\r\n      <ul ref={this.messageContainer} className=\"message-thread\">\r\n        {\r\n          this.state.conversations.map( (conversation, index) => \r\n            <li className={`${this.alignMessages(conversation.toUserId) ? 'align-right' : ''}`} key={index}>\r\n             {conversation.message}\r\n             </li>\r\n          )\r\n        }\r\n        {\r\n          <li className={`${this.showIsSeen() ? \"show-seen\" : \"hide-seen\"}`}>seen</li>\r\n        }\r\n      </ul>\r\n      \r\n    )\r\n  }\r\n\r\n  getInitiateConversationUI() {\r\n    if (this.props.newSelectedUser !== null) {\r\n      return (\r\n        <div className=\"message-thread start-chatting-banner\">\r\n          <p className=\"heading\">\r\n            First time chat with {this.props.newSelectedUser.username},\r\n            <span className=\"sub-heading\"> Say Hi.</span>\r\n          </p>\t\t\t\r\n        </div>\r\n      )\r\n    }    \r\n  }\r\n\r\n\r\n\r\n  onFocusMessage = () => {\r\n\r\n    var arr = this.state.conversations;\r\n    var lastMessage = arr[arr.length - 1];\r\n \r\n    if(lastMessage){\r\n      var data = {\r\n        fromUserId: lastMessage.fromUserId,\r\n        toUserId: lastMessage.toUserId\r\n      }\r\n\r\n      if(sessionStorage.getItem('userid') !== lastMessage.fromUserId){\r\n        ChatSocketServer.sendSeen(data);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { messageLoading, selectedUser } = this.state;\r\n    return (\r\n      <>\r\n        <div className={`message-overlay ${!messageLoading ? 'visibility-hidden' : ''}`}>\r\n          <h3 style={{color:'#1DA57A'}}> {selectedUser !== null && selectedUser.username ? 'Loading Messages' : '' }</h3>\r\n        </div>\r\n        <div className={`message-wrapper ${messageLoading ? 'visibility-hidden' : ''}`}>\r\n          <div className=\"message-container\">\r\n            <div className=\"opposite-user\">\r\n              {this.props.newSelectedUser !== null ? this.props.newSelectedUser.username : '----'}\r\n            </div>\r\n            {this.state.conversations.length > 0 ? this.getMessageUI() : this.getInitiateConversationUI()}\r\n          </div>\r\n\r\n          <div className=\"message-typer\">\r\n            <form>\r\n              <textarea \r\n              className=\"message form-control\" \r\n              placeholder=\"Type and hit Enter\" \r\n              onKeyPress={this.sendMessage}\r\n              onFocus={this.onFocusMessage}>\r\n              </textarea>\r\n  \r\n            </form>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Conversation;\r\n","import React, { Component } from 'react';\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport ChatSocketServer from '../../socketio/ChatSocketServer';\r\nimport ChatHttpServer from '../../api/ChatHttpServer';\r\n\r\nimport ChatList from './chat-list/ChatList';\r\nimport Conversation from './conversation/Conversation';\r\nimport loadinggif from '../../images/loading3.gif'\r\n\r\nimport './Home.css';\r\nimport { Row,Col, Button } from 'react-bootstrap';\r\nimport logouticon from '../../images/logout.png'\r\nimport logo from '../../images/logo.png'\r\n\r\nclass Home extends Component {\r\n  userId = null;\r\n  state = {\r\n    isOverlayVisible: true,\r\n    username: '______',\r\n    selectedUser: null\r\n  }\r\n\r\n  logout = async () => {\r\n    try {\r\n      await ChatHttpServer.removeLS();\r\n      ChatSocketServer.logout({\r\n        userId: this.userId\r\n      });\r\n      ChatSocketServer.eventEmitter.on('logout-response', (loggedOut) => {\r\n        this.props.history.push(`/`);\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  setRenderLoadingState = (loadingState) => {\r\n    this.setState({\r\n      isOverlayVisible: loadingState\r\n    });\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      this.setRenderLoadingState(true);\r\n      this.userId = await ChatHttpServer.getUserId();\r\n      const response = await ChatHttpServer.userSessionCheck(this.userId);\r\n      if (response.error) {\r\n        this.props.history.push(`/`)\r\n      } else {\r\n        this.setState({\r\n          username: response.username\r\n        });\r\n        ChatHttpServer.setLS('username', response.username);\r\n        ChatSocketServer.establishSocketConnection(this.userId);\r\n      }\r\n      this.setRenderLoadingState(false);\r\n    } catch (error) {\r\n      this.setRenderLoadingState(false);\r\n      this.props.history.push(`/`)\r\n    }\r\n  }\r\n\r\n  updateSelectedUser = (user) => {\r\n    this.setState({\r\n      selectedUser: user\r\n    });\r\n  }\r\n\r\n  getChatListComponent() {\r\n    return this.state.isOverlayVisible ? null : <ChatList userId={this.userId} updateSelectedUser={this.updateSelectedUser}/>\r\n  }\r\n\r\n  getChatBoxComponent = () => {\r\n    return this.state.isOverlayVisible ? null : <Conversation userId={this.userId} newSelectedUser={this.state.selectedUser}/>\r\n  }\r\n  \r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className = {`${this.state.isOverlayVisible ? 'overlay': 'visibility-hidden' } `}>\r\n          <img alt=\"\" src={loadinggif}/>\r\n        </div>\r\n        <header className=\"app-header\">\r\n          <nav className=\"navbar navbar-expand-md\">\r\n            <img alt=\"\" className=\"logoicon\" src={logo}/>\r\n            <h2 style={{color:'black',paddingLeft:'20px',paddingTop:'10px'}}>{this.state.username} </h2>\r\n          </nav>\r\n          <ul className=\"nav justify-content-end\">\r\n            <li className=\"nav-item\">\r\n              <Button className=\"logoutbtn\" onClick={this.logout}>\r\n              <img alt=\"\" className=\"logouticon\" src={logouticon} />\r\n              </Button>\r\n            </li>\r\n          </ul>\r\n        </header>\r\n\r\n        <main role=\"main\" className=\"containerchat content\" >\r\n        \r\n          <div className=\"row chat-content\">\r\n            <div className=\"col-3 chat-list-container\">\r\n              {this.getChatListComponent()}\r\n            </div>\r\n            <div className=\"col-9 message-container\">\r\n              {this.getChatBoxComponent()}\r\n            </div>\r\n          </div>\r\n         \r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Home)\r\n","\r\nimport React, { Component } from 'react';\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch\r\n} from \"react-router-dom\";\r\n\r\nimport Authentication from './pages/authentication/Authentication';\r\nimport Home from './pages/home/Home';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router basename=\"/abc\">\r\n          <Route path=\"/\" exact component={Authentication} />\r\n          <Route path=\"/home/\" component={Home} />\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","const config = {\r\n    url:\"https://ezchat-realtime.herokuapp.com/\"\r\n    // url:\"http://localhost:4000\"\r\n}\r\n\r\nmodule.exports = config","module.exports = __webpack_public_path__ + \"static/media/loading3.8561f729.gif\";","module.exports = __webpack_public_path__ + \"static/media/logo.4c1ac505.png\";","module.exports = __webpack_public_path__ + \"static/media/logout.abad0bee.png\";"],"sourceRoot":""}